#+TITLE: Experiment Guide for UNIX Network Programming
#+DATE: <2021-03-23 Tue>
#+AUTHOR: 网182陈涛 and 189074308

* Remark

1. You should submit the HTML file of this file, using C-c C-e h h.
2. the HTML file name should be of the form: UNP2020-189074308.html

* Exp. 1st: A one-time shell "system"

** README
   Please implement a shell command, whose name is system. 
   When executed, it requires another command as 
   its argument, and this command could be composed by one or multiple 
   arguments. For instance, "system" may be executed as follows:

#+BEGIN_SRC sh
  usr@~/>./system cat text.txt

#+END_SRC

   The command "system", implemented by you, should act like as a one-time 
   shell to execute its argument "cat text.txt". Specifically, it should
   at first fork a child process, between which and itself there has been 
   a pipe. The child process duplicates its stdout (and its stderr) to the
   write end of the pipe, with which it can transfer the output to the parent,
   and then call some function in the "exec" family to execute the command "cat" 
   with the argument "text.txt", for instance. On the other side of the pipe,
   the parent should read from the read end of the pipe to receive the output
   of the child, and print them on the displayer. After the termination of the
   child, the parent should reap it, and then exit.
   
** The code
#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
int main(int argc, char *argv[])
{
	char buffer[BUFSIZ + 1];
	char file_des[2];
	pid_t cpid;
	char somed_ata[2];
	int flag = 0;
	memset(buffer, '\0', sizeof(buffer));
	if (argc == 3)
	{
		if (strcmp(argv[1], "cat") == 0)
		{
			flag = 0;
		}
		else
		{
			flag = 1;
		}
		if (flag == 0)
		{
			cpid = fork();
			if (cpid == -1) //Creat Error
			{
				exit(0);
			}
			else if (cpid == 0) //Creat Child
			{
				write(file_des[1], argv, strlen(argv));
			}
			else //Creat Father
			{
				sprintf(buffer, "%s", file_des[0]);
				execvp("cat",buffer);
			}
		}
		else
		{
			exit(0);
		}
	}
	else
	{
		exit(0);
	}
} 
#+END_SRC 


* Exp. 2nd: Concurrent Echo Service by TCP

** README
  In this experiment, you should implement a pair of client-server programs. The server program
  provides Echo service with concurrent child processes. For each client request, the parent
  server, which is responsible for listening, will fork a child process to deal with the request.
  The child process exits after the completion of the service, and it will reaped by the parent
  through signal handling (using system API sigaction ).

  The client initiates the request by the following command:

#+BEGIN_SRC sh
unix> ./echoclient <server's IP> < file.txt
line 1    # data echoed back by the server
line 2
line 3
...
unix>
#+END_SRC

** The code
  
#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define BUF_SIZE 1024
void error_handling(char *message);

int main(int argc, char *argv[])
{
        int sock;
        char message[BUF_SIZE];
        char temp[BUF_SIZE];
        int str_len;
        int len;
        struct sokaddr_in serv_adr;

        if(argc != 3){
            printf("Usage: %s <IP> <port>", argv[0]);
            exit(1);
        }

        sock = socket(PF_INET, SOCK_STREAM, 0);
        if(sock == -1)
            error_handling("socket() error!");

        memset(&serv_adr, 0, sizeof(serv_adr));
        serv_adr.sin_family = AF_INET;
        serv_adr.sin_addr.s_addr = inet_addr(argv[1]);
        serv_adr.sin_port = htons(atoi(argv[2]));

        if(connect(sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)) == -1)
            error_handling("connect() error!");
        else
            puts("Connected.........");

        while(1)
        {   printf("请输入字符串长度: ");
            scanf("%d",&len);
            write(sock,(char*)&len,1);

            printf("请输入内容(按Q退出): ");
            scanf("%s",temp);

            if(!strcmp(temp,"q")||!strcmp(temp,"Q"))
                break;

            write(sock,temp,len);

            read(sock,message,len);
            printf("消息为:%s\n",message);
        }
        close(sock);
        return 0;
}

void error_handling(char *message){
    fputs(message, stderr);
    fputc('\n', stderr);
    exit(1);
}
#+END_SRC 

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define BUF_SIZE 1024
void error_handling(char *message);

int main(int argc, char *argv[])
{
        int sock;
        char message[BUF_SIZE];
        char temp[BUF_SIZE];
        int str_len;
        int len;
        struct sockaddr_in serv_adr;

        if(argc != 3){
            printf("Usage: %s <IP> <port>", argv[0]);
            exit(1);
        }

        sock = socket(PF_INET, SOCK_STREAM, 0);
        if(sock == -1)
            error_handling("socket() error!");

        memset(&serv_adr, 0, sizeof(serv_adr));
        serv_adr.sin_family = AF_INET;
        serv_adr.sin_addr.s_addr = inet_addr(argv[1]);
        serv_adr.sin_port = htons(atoi(argv[2]));

        if(connect(sock, (struct sockaddr*)&serv_adr, sizeof(serv_adr)) == -1)
            error_handling("connect() error!");
        else
            puts("Connected.........");

        while(1)
        {   printf("请输入字符串长度: ");
            scanf("%d",&len);
            write(sock,(char*)&len,1);

            printf("请输入内容(按Q退出): ");
            scanf("%s",temp);

            if(!strcmp(temp,"q")||!strcmp(temp,"Q"))
                break;

            write(sock,temp,len);

            read(sock,message,len);
            printf("消息为:%s\n",message);
        }
        close(sock);
        return 0;
}

void error_handling(char *message){
    fputs(message, stderr);
    fputc('\n', stderr);
    exit(1);
}
#+END_SRC 

* Exp. 3rd: IO-Multiplexing
  
** README
  Use the system API "epoll" to implement the server program in the 
  second experiment.

** The code
#+BEGIN_SRC c
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <memory.h>
#include <signal.h>
#include <string.h>
#include <errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <sys/select.h>
#include <poll.h>
#include <pthread.h>

int sockfd;

void sign_handler(int signo)
{
    pid_t pid;
    int stat;
    if(signo==SIGINT)
    {
        printf("echo server close\n");
        close(sockfd);
        exit(1);
    }
    if(signo==SIGCHLD){
        printf("client close\n");
        wait(0);
    }
    return;
}
void out_fd(int fd)
{
    struct sockaddr_in arr;
    socklen_t len=sizeof(arr);
    if(getpeername(fd,(struct sockaddr*)&arr,&len)<0){
        perror("getpeername fail\n");
        exit(1);
    }
    char ip[16];
    
    memset(&ip,0,sizeof(ip));
    inet_ntop(AF_INET,&arr.sin_addr.s_addr,ip,sizeof(ip));
    printf("%s connected\n",ip);
}
void server_do(int fd)
{
    char buffer[BUFSIZ];
    while(1){
        printf("ready to read\n");
        memset(buffer,0,sizeof(buffer));
        ssize_t size;
        if((size=read(fd,buffer,sizeof(buffer)))<0){
            perror("server child read fail\n");
            break;
        }else if(size==0){
            break;
        }else{
            printf("number of received bytes=%ld\n",size);
            buffer[size-1]='\0';
            printf("%s\n",buffer);
            if(write(fd,buffer,size)<0){
                if(errno==EPIPE){
                    break;
                }
                perror("server child write fail\n");
            }
        }
    }
}
void *doit(void *arg)
{
    int fd=*((int *)arg);
    
    server_do(fd);
    
    close(fd);
    return (void*)0;
}

int main(int argc,char *argv[])
{    
    if(argc<2)
    {
        printf("usage:%s <port>",argv[0]);
        exit(1);
    }
    //注册信号
    if(signal(SIGINT,sign_handler)==SIG_ERR){
        perror("signal sigint error\n");
        exit(1);
    }
    if(signal(SIGCHLD,sign_handler)==SIG_ERR){
        perror("signal sigint error\n");
        exit(1);
    }
    /*create socket*/
    sockfd=socket(AF_INET,SOCK_STREAM,0);
    if(sockfd<0){
        perror("socket create fail\n");
        exit(1);
    }
    /*bind socket*/
    struct sockaddr_in serveraddr;
    serveraddr.sin_family=AF_INET;
    serveraddr.sin_port=htons(atoi(argv[1]));
    serveraddr.sin_addr.s_addr=INADDR_ANY;
    if(bind(sockfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr))<0){
        perror("socket bind fail\n");
        exit(1);
    } 
    if(listen(sockfd,10)<0){
        perror("socket listen fail\n");
        exit(1);
    }
    //设置线程的分离属性
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr,PTHREAD_CREATE_DETACHED); 

     int *iptr;
     
    while(1){
        iptr=malloc(sizeof(int));
        
        if((*iptr=accept(sockfd,NULL,NULL))>0){
            out_fd(*iptr);
        }
        pthread_t th;
        int err;
        if((err=pthread_create(&th,&attr,doit,iptr))!=0){
            perror("pthread create fail\n");
        }
        pthread_attr_destroy(&attr);    
    }
    return 0;
#+END_SRC 

* Exp. 4th: Pre-allocated Threading with Mutex

** README
  In this experiment, you will implement a TCP-based echo server with
  pre-allocated threading. Threads use POSIX thread mutex to multuall exclusively call
  the "accept" to establish the connection. 

  You can use clients in Exp. 2nd to test your code.
** The code

#+BEGIN_SRC C

/*server code*/
#include <sys/socket.h>

#include <sys/types.h>/*The funcion sizeof,socklen_t need*/

#include <netinet/in.h>/*The funcion sockaddr_in need*/

#include <unistd.h>

#include <arpa/inet.h>/*The funcion inet_ntoa need*/

#include <string.h>/*The funcion strlen need*/

#include <errno.h>/*errno == EINTR*/

#include <sys/wait.h>/*WNOHANG*/

#include <pthread.h>

 

#define  UPORT 8088 /*This is the port number used by me */

#define  MAXLINE 255

#define  LISTENQ 32

#define  NAMELEN 21

typedef struct {

       char buf[MAXLINE+1];

       ssize_t n;

       int sockfd;

       char name[NAMELEN+1];

} readline;

 

pthread_key_t ser_key;

pthread_once_t ser_once=PTHREAD_ONCE_INIT;

 

void str_echo( readline *tsd);

void sig_chld(int signo);

void ser_destructor(void *ptr);

void service_once(void);

static void *doit(void *arg);

void echo_name(readline *tsd);

 

int main(int argc, char **argv)

{

       int   listenfd ,connfd, reuse=1;//if the value of reuse is not zero, mean open this reuse address selection, or else ban this function

       int *cfdp;

       struct sockaddr_in  servaddr, cliaddr;

       socklen_t  clilen;

       pthread_t tid,tid1;

       listenfd = socket(AF_INET, SOCK_STREAM, 0);

       bzero(&servaddr, sizeof(servaddr));

       servaddr.sin_family      = AF_INET;

       servaddr.sin_addr.s_addr = htonl(INADDR_ANY);

       servaddr.sin_port        = htons(UPORT);       /* daytime server */

    if( setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&reuse,sizeof(reuse))==-1){

              perror("There is an error occured when the program set REUSEADDR symbol\n");

              return -1;

       }

       if(bind(listenfd, (struct sockaddr *) &servaddr, sizeof(servaddr))==-1){

              perror("%s\r\n","bind error");

              exit(-1);

       }

       listen(listenfd, LISTENQ);

       signal(SIGCHLD, sig_chld);

       for ( ; ; ) {

              clilen=sizeof(cliaddr);

              cfdp=(int *)malloc(sizeof(int));

              if((*cfdp = accept(listenfd, (struct sockaddr *) &cliaddr, &clilen))==-1){

                     perror("%s\r\n","An error occured while tring to creat a connfd! ");

                     exit(-1);

              }

              printf("the new connection address is:%s:%d\r\n",inet_ntoa(cliaddr.sin_addr),cliaddr.sin_port);

              if(pthread_create(&tid, NULL, &doit, cfdp )!=0){

                     perror("pthread_create: error\n");

                     exit(-1);

              }

              //pthread_create(&tid, NULL, &doit,NULL );

              /*if( (childpid=fork())==0) {

                     close(listenfd);

                     str_echo(connfd);

                     exit(0);

              }*/

              //pthread_join(tid,NULL);

              //close(*cfdp); /*parent closes connected socket*/

       }

}

void echo_name(readline *tsd){

       char  tmp;

       int i, j;

       char name[21];//all

       strcpy(tsd->buf,"Dear client please input your name: ");

       if(write(tsd->sockfd, tsd->buf,strlen(tsd->buf)+1)==-1) {

              perror("write error");

              exit(-1);

       }

 

       if ((tsd->n=read(tsd->sockfd,tsd->name, NAMELEN)) > 0) { /*tsd->=*tsd.n*/

              tsd->name[tsd->n-2]=0;

              printf("the client's name: [ %s ]\n", tsd->name);

              strcpy(tsd->buf,"Now,you can begin to input the string you need to conver!\n");

              if(write(tsd->sockfd, tsd->buf,strlen(tsd->buf)+1)==-1) {

                     perror("write error");

                     exit(-1);

              }

       }

       if (tsd->n<0 && errno == EINTR) {

              perror("read:error interrupt");

       }

       else if (tsd->n<0) {

              perror("str_echo:read error");

              exit(-1);

       }

}

void str_echo( readline *tsd) {

       char  tmp;

       int i, j;

again:

       while ( (tsd->n=read(tsd->sockfd,tsd->buf, MAXLINE)) > 0) { /*tsd->=*tsd.n*/

              printf("client [ %s ] input string:%s",tsd->name,tsd->buf);

              for(i=0, j=tsd->n-3; i<j; i++, j--) {

                     tmp=tsd->buf[i];

                     tsd->buf[i]=tsd->buf[j];

                     tsd->buf[j]=tmp;

              }

              if(write(tsd->sockfd, tsd->buf, tsd->n)==-1) {

                     perror("write error");

                     exit(-1);

              }

              printf("inverted order %s's string:%s",tsd->name,tsd->buf);

       }

       if (tsd->n<0 && errno == EINTR) {

              goto again;

       }

       else if (tsd->n<0) {

              perror("str_echo:read error");

              exit(-1);

       }

}

void sig_chld(int signo)

{

       pid_t pid;

       int stat;

       while( (pid = waitpid(-1,&stat,WNOHANG))>0)

              printf("child %d terminated\n", pid);

       return;

}

void ser_destructor(void *ptr) {

       free(ptr);

       printf("one of the tsd end:%d\n",pthread_self());

}

void service_once(void) {

       pthread_key_create(&ser_key, ser_destructor);

}

 

static void *doit(void *arg) {

       readline *tsd;

       if(pthread_detach(pthread_self())!=0) {

              perror("pthread_detach:error\n");

              exit(-1);

       }

       pthread_once(&ser_once,service_once);

       if( (tsd=pthread_getspecific(ser_key)) == NULL){

              tsd=calloc(1,sizeof(readline));

              pthread_setspecific(ser_key,tsd);

              tsd->sockfd=*( (int*)arg);

       }

       //printf("%d\n",tsd->sockfd);

    echo_name(tsd);

       str_echo( tsd);

       if(close(*( (int*)arg))==-1){

              perror("close:error\n");

              exit(-1);

       }

       pthread_exit(0);

       return;

}

/*client code*/
#include <sys/socket.h>

#include <sys/types.h>

#include <netinet/in.h>

#include <unistd.h>

#include <stdio.h>

#include <string.h>

#include <errno.h>

 

#define  UPORT 8088 /*This is the port number used by me */

#define  MAXLINE 255

 

void str_cli(FILE *fp, int sockfd) {

       char sendline[MAXLINE+1], recvline[MAXLINE+1];

       if(read(sockfd, recvline, MAXLINE) <= 0 ) {

              printf("server terminated prematurely!\n");

              exit(0);

       }

       else{

              fputs(recvline,stdout);

       }

       while (fgets(sendline, MAXLINE+1, fp) != NULL) {

              if(write(sockfd, sendline, (strlen(sendline)+1)) == -1) {

                     perror("write error");

                     exit(-1);

              }

              if(read(sockfd, recvline, MAXLINE) <= 0 ) {

                     printf("server terminated prematurely!\n");

                     exit(0);

              }

              //recvline(MAXLINE)=0;/*auto set 0 by initializing*/

              fputs(recvline,stdout);

       }

}

 

 

 

int main(int argc, char **argv)

{

       int                               sockfd, n;

       struct sockaddr_in  servaddr;

       if (argc != 2){

              perror("usage: a.out <IPaddress>");

              exit(-1);

       }

       if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0){

              perror("socket error");

              exit(-1);

       }

    bzero(&servaddr, sizeof(servaddr));

       servaddr.sin_family = AF_INET;

       servaddr.sin_port   = htons(UPORT);  /* daytime server */

       if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0){

              printf("inet_pton error for %s", argv[1]);

              exit(-1);

       }

       if (connect(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0){

              perror("connect error");

              exit(-1);

       }

       str_cli(stdin,sockfd); /*do it all*/

       exit(0);


#+END_SRC

* Exp. 5th: Pre-allocated Process Server

** README

  In this experiment, your job is to implement a pre-allocated process server.
  Before calling the API accept on the listening socket, the socket descriptor
  should be set as a reusable one such that it can be listened simultaneously by multiple
  processes (use the socket option SO_ REUSEPORT). You do not need to worry
  about "thunder herd".

  You can use clients in Exp. 2nd to test your code.

** The code
#+BEGIN_SRC C
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <memory.h>
#include <signal.h>
#include <string.h>
#include <errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <sys/select.h>
#include <poll.h>
#include <pthread.h>

int sockfd;

void sign_handler(int signo)
{
    pid_t pid;
    int stat;
    if(signo==SIGINT)
    {
        printf("echo server close\n");
        close(sockfd);
        exit(1);
    }
    if(signo==SIGCHLD){
        printf("client close\n");
        wait(0);
    }
    return;
}
void out_fd(int fd)
{
    struct sockaddr_in arr;
    socklen_t len=sizeof(arr);
    if(getpeername(fd,(struct sockaddr*)&arr,&len)<0){
        perror("getpeername fail\n");
        exit(1);
    }
    char ip[16];
    
    memset(&ip,0,sizeof(ip));
    inet_ntop(AF_INET,&arr.sin_addr.s_addr,ip,sizeof(ip));
    printf("%s connected\n",ip);
}
void server_do(int fd)
{
    char buffer[BUFSIZ];
    while(1){
        printf("ready to read\n");
        memset(buffer,0,sizeof(buffer));
        ssize_t size;
        if((size=read(fd,buffer,sizeof(buffer)))<0){
            perror("server child read fail\n");
            break;
        }else if(size==0){
            break;
        }else{
            printf("number of received bytes=%ld\n",size);
            buffer[size-1]='\0';
            printf("%s\n",buffer);
            if(write(fd,buffer,size)<0){
                if(errno==EPIPE){
                    break;
                }
                perror("server child write fail\n");
            }
        }
    }
}
void *doit(void *arg)
{
    int fd=*((int *)arg);
    
    server_do(fd);
    
    close(fd);
    return (void*)0;
}

int main(int argc,char *argv[])
{    
    if(argc<2)
    {
        printf("usage:%s <port>",argv[0]);
        exit(1);
    }
    //注册信号
    if(signal(SIGINT,sign_handler)==SIG_ERR){
        perror("signal sigint error\n");
        exit(1);
    }
    if(signal(SIGCHLD,sign_handler)==SIG_ERR){
        perror("signal sigint error\n");
        exit(1);
    }
    /*create socket*/
    sockfd=socket(AF_INET,SOCK_STREAM,0);
    if(sockfd<0){
        perror("socket create fail\n");
        exit(1);
    }
    /*bind socket*/
    struct sockaddr_in serveraddr;
    serveraddr.sin_family=AF_INET;
    serveraddr.sin_port=htons(atoi(argv[1]));
    serveraddr.sin_addr.s_addr=INADDR_ANY;
    if(bind(sockfd,(struct sockaddr*)&serveraddr,sizeof(serveraddr))<0){
        perror("socket bind fail\n");
        exit(1);
    } 
    if(listen(sockfd,10)<0){
        perror("socket listen fail\n");
        exit(1);
    }
    //设置线程的分离属性
    pthread_attr_t attr;
    pthread_attr_init(&attr);
    pthread_attr_setdetachstate(&attr,PTHREAD_CREATE_DETACHED); 

     int *iptr;
     
    while(1){
        iptr=malloc(sizeof(int));
        
        if((*iptr=accept(sockfd,NULL,NULL))>0){
            out_fd(*iptr);
        }
        pthread_t th;
        int err;
        if((err=pthread_create(&th,&attr,doit,iptr))!=0){
            perror("pthread create fail\n");
        }
        pthread_attr_destroy(&attr);    
    }
    return 0;
}

#+END_SRC
